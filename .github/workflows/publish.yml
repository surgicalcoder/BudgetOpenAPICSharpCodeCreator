# GitHub Action for Building and Publishing Release
# Save this as .github/workflows/build-and-release.yml

name: Build and Release

on:
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for GitVersion
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'  # Adjust version as needed
        
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.x'
        
    - name: Create GitVersion config
      run: |
        cat > gitversion.yml << 'EOF'
        mode: ContinuousDelivery
        branches:
          main:
            increment: Patch
          master:
            increment: Patch
          develop:
            increment: Patch
          feature:
            increment: Patch
          hotfix:
            increment: Patch
          release:
            increment: Patch
        major-version-bump-message: '\+semver:\s?(breaking|major)'
        minor-version-bump-message: '\+semver:\s?(feature|minor)'
        patch-version-bump-message: '\+semver:\s?(fix|patch)'
        no-bump-message: '\+semver:\s?(none|skip)'
        legacy-semver-padding: 4
        build-metadata-padding: 4
        commits-since-version-source-padding: 4
        commit-message-incrementing: Enabled
        EOF
        
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
      
    - name: Display GitVersion outputs
      run: |
        echo "Major: ${{ steps.gitversion.outputs.major }}"
        echo "Minor: ${{ steps.gitversion.outputs.minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.patch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build project
      run: dotnet build --configuration Release --no-restore
      
    - name: Run tests (if any)
      run: dotnet test --configuration Release --no-build --verbosity normal
      continue-on-error: true  # Continue even if tests fail
      
    - name: Publish project
      run: dotnet publish --configuration Release --no-build --output ./publish
      
    - name: Create release archive
      run: |
        cd publish
        tar -czf ../BudgetOpenAPICSharpCodeCreator-${{ steps.gitversion.outputs.semVer }}.tar.gz *
        cd ..
        zip -r BudgetOpenAPICSharpCodeCreator-${{ steps.gitversion.outputs.semVer }}.zip publish/
        
    - name: Generate release notes
      id: release_notes
      run: |
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "## Release v${{ steps.gitversion.outputs.semVer }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Changes" >> $GITHUB_OUTPUT
        echo "- Built from commit: ${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "- Build date: $(date)" >> $GITHUB_OUTPUT
        echo "- Version: ${{ steps.gitversion.outputs.fullSemVer }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Version Bumping" >> $GITHUB_OUTPUT
        echo "To control version increments, use these patterns in commit messages:" >> $GITHUB_OUTPUT
        echo "- \`+semver: major\` or \`+semver: breaking\` - Major version bump" >> $GITHUB_OUTPUT
        echo "- \`+semver: minor\` or \`+semver: feature\` - Minor version bump" >> $GITHUB_OUTPUT
        echo "- \`+semver: patch\` or \`+semver: fix\` - Patch version bump (default)" >> $GITHUB_OUTPUT
        echo "- \`+semver: none\` or \`+semver: skip\` - No version bump" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Files" >> $GITHUB_OUTPUT
        echo "- \`BudgetOpenAPICSharpCodeCreator-${{ steps.gitversion.outputs.semVer }}.tar.gz\` - Linux/macOS archive" >> $GITHUB_OUTPUT
        echo "- \`BudgetOpenAPICSharpCodeCreator-${{ steps.gitversion.outputs.semVer }}.zip\` - Windows archive" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.gitversion.outputs.semVer }}
        name: Release v${{ steps.gitversion.outputs.semVer }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
        files: |
          BudgetOpenAPICSharpCodeCreator-${{ steps.gitversion.outputs.semVer }}.tar.gz
          BudgetOpenAPICSharpCodeCreator-${{ steps.gitversion.outputs.semVer }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}